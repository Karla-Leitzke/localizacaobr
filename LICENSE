*&---------------------------------------------------------------------*
*& Report Z_NFE_FAKE_ANSWER
*&---------------------------------------------------------------------*
*& Author: Renan Correa - S4CN.com
*& Follow me on Linkedin https://www.linkedin.com/in/correarenan/
*& Subscribe to youtube channel https://www.youtube.com/c/S4CN_br
*&---------------------------------------------------------------------*
REPORT z_nfe_fake_answer.


*&---------------------------------------------------------------------*
*&      Data Declaration
*&---------------------------------------------------------------------*
DATA: v_rfcdest   TYPE bdbapidst,
      lv_date     TYPE datum,
      lv_time     TYPE uzeit,
      lt_bapiret2	TYPE bapirettab.

DATA: ls_docnum TYPE j_1bnfdoc-docnum.

SELECTION-SCREEN BEGIN OF BLOCK bl.

  PARAMETERS:
    p_auth TYPE xfeld RADIOBUTTON GROUP r1 DEFAULT 'X',
    s_doc1 TYPE j_1bnfdoc-docnum.
  SELECTION-SCREEN SKIP 1.

  PARAMETERS:
    p_rejec TYPE xfeld RADIOBUTTON GROUP r1,
    s_doc2  TYPE j_1bnfdoc-docnum.
  SELECTION-SCREEN SKIP 1.

  PARAMETERS:
    p_canc TYPE xfeld RADIOBUTTON GROUP r1,
    s_doc3 TYPE j_1bnfdoc-docnum.
  SELECTION-SCREEN SKIP 1.

SELECTION-SCREEN END OF BLOCK bl.

*&---------------------------------------------------------------------*
*&      start-of-selection
*&---------------------------------------------------------------------*
START-OF-SELECTION.

"1st case authorize

  IF p_auth IS NOT INITIAL AND s_doc1 IS NOT INITIAL.
    ls_docnum = s_doc1.

    SELECT SINGLE * FROM j_1bnfdoc INTO @DATA(ls_doc) WHERE docnum = @ls_docnum.

    IF ls_doc IS INITIAL.
      WRITE: |Document { ls_docnum } does not exist|.
      RETURN.
    ENDIF.
"dummy call with dummy protocol and response to authorize with status 100
    CALL FUNCTION 'J_1B_NFE_XML_IN'
      EXPORTING
        i_docnum       = ls_docnum
        i_authcode     = '666666666666666'
        i_authdate     = sy-datum
        i_authtime     = sy-timlo
        i_code         = '100'
        i_msgtyp       = '1'
        i_event_msgtyp = ''
      EXCEPTIONS
        inbound_error  = 1
        not_authorized = 2
        OTHERS         = 3.

    IF sy-subrc IS INITIAL.
      WRITE: |Document' { ls_docnum } Authorized|.
    ELSE.
      WRITE 'Error when Updating doc'.
    ENDIF.

    "2nd case rejection
  ELSEIF p_rejec IS NOT INITIAL AND s_doc2 IS NOT INITIAL.
    ls_docnum = s_doc2.

    SELECT SINGLE * FROM j_1bnfdoc INTO ls_doc WHERE docnum = ls_docnum.

    IF ls_doc IS INITIAL.
      WRITE: |Document { ls_docnum } does not exist|.
      RETURN.
    ENDIF.

"dummy to reject the nota fiscal
    CALL FUNCTION 'J_1B_NFE_XML_IN'
      EXPORTING
        i_docnum       = ls_docnum
        i_authcode     = ''
        i_authdate     = sy-datum
        i_authtime     = sy-timlo
        i_code         = '666'
        i_msgtyp       = '2'
        i_event_msgtyp = ''
      EXCEPTIONS
        inbound_error  = 1
        not_authorized = 2
        OTHERS         = 3.

    IF sy-subrc IS INITIAL.
      WRITE: |Document' { ls_docnum } Rejected successfully|.
    ELSE.
      WRITE 'Error when Updating doc'.
    ENDIF.

    "3rd case cancel

  ELSEIF p_canc IS NOT INITIAL AND s_doc3 IS NOT INITIAL.
    ls_docnum = s_doc3.

    SELECT SINGLE * FROM j_1bnfdoc INTO ls_doc WHERE docnum = ls_docnum.

    IF ls_doc IS INITIAL.
      WRITE: |Document { ls_docnum } does not exist|.
      RETURN.
    ENDIF.

"Decide if skipping or cancellation
    IF ls_doc-docstat = '2'. "skipping

      CALL FUNCTION 'J_1B_NFE_XML_IN'
        EXPORTING
          i_docnum       = ls_docnum
          i_authcode     = '666666666666666'
          i_authdate     = lv_date
          i_authtime     = lv_time
          i_code         = '102'
          i_msgtyp       = '5'
          i_event_msgtyp = ''
        EXCEPTIONS
          inbound_error  = 1
          not_authorized = 2
          OTHERS         = 3.

      IF sy-subrc IS INITIAL.
        WRITE: |Document' { ls_docnum } Skipped Successfully|.
      ELSE.
        WRITE 'Error when Updating doc'.
      ENDIF.

    ELSE. "cancellation

      DATA: is_event TYPE J_1BNFE_EVENT_IN,
            pt_bapiret2 TYPE bapirettab,
            it_event TYPE J_1BNFE_EVENT_IN_TAB.

DATA(lv_eventime) = |{ sy-datum }{ sy-timlo }|.

* update internally to cancel as first event for NFe
  is_event-docnum         = ls_doc-docnum.
  is_event-ext_event      = '110111'.
  is_event-seqnum         = '1'.
  is_event-ext_seqnum     = '1'.
  is_event-acckey         = '11234567890909909'.
  is_event-authcode       = '666666666666666'.
  is_event-reply_tmpl     = lv_eventime.
  is_event-code           = '101'.
  is_event-ext_reply_tmpl = lv_eventime.
  is_event-msgtyp         = '1'.

  APPEND is_event TO it_event.

    CALL FUNCTION 'J_1BNFE_EVENT_IN'
      TABLES
        it_events             = it_event
        ct_bapiret2           = pt_bapiret2
      EXCEPTIONS
        system_failure        = 1
        communication_failure = 2
        OTHERS                = 3.

      IF sy-subrc IS INITIAL.
        WRITE: |Document' { ls_docnum } Cancelled Successfully|.
      ELSE.
        WRITE 'Error when Updating doc'.
      ENDIF.

    ENDIF.

  ENDIF.